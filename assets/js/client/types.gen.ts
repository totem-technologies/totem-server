// This file is auto-generated by @hey-api/openapi-ts

/**
 * ProfileAvatarTypeEnum
 */
export type ProfileAvatarTypeEnum = 'TD' | 'IM';

/**
 * PublicUserSchema
 */
export type PublicUserSchema = {
    profile_avatar_type: ProfileAvatarTypeEnum;
    /**
     * Circle Count
     */
    circle_count?: number | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Staff Status
     * Designates whether the user can log into this admin site.
     */
    is_staff?: boolean;
    /**
     * Profile Avatar Seed
     */
    profile_avatar_seed?: string;
    /**
     * Profile Image
     * Profile image, must be under 5mb. Will be cropped to a square.
     */
    profile_image?: string | null;
    /**
     * Date Created
     */
    date_created: string;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * AvatarUpdate
 */
export type AvatarUpdate = {
    avatar_type: ProfileAvatarTypeEnum | null;
    /**
     * Update Avatar Seed
     */
    update_avatar_seed: boolean | null;
};

/**
 * EventsFilterSchema
 */
export type EventsFilterSchema = {
    /**
     * Category
     */
    category: string | null;
    /**
     * Author
     */
    author: string | null;
};

/**
 * Input
 */
export type Input = {
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
};

/**
 * EventListSchema
 */
export type EventListSchema = {
    space: SpaceSchema;
    /**
     * Url
     */
    url: string;
    /**
     * Start
     */
    start?: string;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Date Created
     */
    date_created: string;
    /**
     * Date Modified
     */
    date_modified: string;
    /**
     * Title
     */
    title?: string | null;
};

/**
 * PagedEventListSchema
 */
export type PagedEventListSchema = {
    /**
     * Items
     */
    items: Array<EventListSchema>;
    /**
     * Count
     */
    count: number;
};

/**
 * SpaceSchema
 */
export type SpaceSchema = {
    author: PublicUserSchema;
    /**
     * Title
     */
    title: string;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Date Created
     */
    date_created: string;
    /**
     * Date Modified
     */
    date_modified: string;
    /**
     * Subtitle
     */
    subtitle: string;
};

/**
 * AuthorFilterSchema
 */
export type AuthorFilterSchema = {
    /**
     * Name
     */
    name: string;
    /**
     * Slug
     */
    slug: string;
};

/**
 * CategoryFilterSchema
 */
export type CategoryFilterSchema = {
    /**
     * Name
     */
    name: string;
    /**
     * Slug
     */
    slug: string;
};

/**
 * FilterOptionsSchema
 */
export type FilterOptionsSchema = {
    /**
     * Categories
     */
    categories: Array<CategoryFilterSchema>;
    /**
     * Authors
     */
    authors: Array<AuthorFilterSchema>;
};

/**
 * EventDetailSchema
 */
export type EventDetailSchema = {
    /**
     * Slug
     */
    slug: string;
    /**
     * Title
     */
    title: string;
    space: EventSpaceSchema;
    /**
     * Space Title
     */
    space_title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Price
     */
    price: number;
    /**
     * Seats Left
     */
    seats_left: number;
    /**
     * Duration
     */
    duration: number;
    /**
     * Recurring
     */
    recurring: string;
    /**
     * Subscribers
     */
    subscribers: number;
    /**
     * Start
     */
    start: string;
    /**
     * Attending
     */
    attending: boolean;
    /**
     * Open
     */
    open: boolean;
    /**
     * Started
     */
    started: boolean;
    /**
     * Cancelled
     */
    cancelled: boolean;
    /**
     * Joinable
     */
    joinable: boolean;
    /**
     * Ended
     */
    ended: boolean;
    /**
     * Rsvp Url
     */
    rsvp_url: string;
    /**
     * Join Url
     */
    join_url: string | null;
    /**
     * Subscribe Url
     */
    subscribe_url: string;
    /**
     * Cal Link
     */
    cal_link: string;
    /**
     * Subscribed
     */
    subscribed: boolean | null;
    /**
     * User Timezone
     */
    user_timezone: string | null;
    meeting_provider: MeetingProviderEnum;
};

/**
 * EventSpaceSchema
 */
export type EventSpaceSchema = {
    author: PublicUserSchema;
    /**
     * Title
     */
    title: string;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Date Created
     */
    date_created: string;
    /**
     * Date Modified
     */
    date_modified: string;
    /**
     * Subtitle
     */
    subtitle: string;
    /**
     * Categories
     */
    categories: Array<number>;
    /**
     * Short Description
     * Short description, max 255 characters
     */
    short_description?: string | null;
    /**
     * Recurring
     * Example: Once a month (or week, day, etc). Do not put specific times or days of the week.
     */
    recurring: string;
    /**
     * Image
     * Image for the Space header, must be under 5mb
     */
    image?: string | null;
    /**
     * Content
     */
    content?: string;
};

/**
 * MeetingProviderEnum
 */
export type MeetingProviderEnum = 'google_meet' | 'livekit';

/**
 * EventCalendarFilterSchema
 */
export type EventCalendarFilterSchema = {
    /**
     * Space Slug
     * Space slug
     */
    space_slug?: string;
    /**
     * Month
     * Month of the year, 1-12
     */
    month?: number;
    /**
     * Year
     * Year of the month, e.g. 2024
     */
    year?: number;
};

/**
 * EventCalendarSchema
 */
export type EventCalendarSchema = {
    /**
     * Title
     */
    title: string;
    /**
     * Start
     */
    start: string;
    /**
     * Slug
     */
    slug: string;
    /**
     * Url
     */
    url: string;
};

/**
 * WebflowEventsFilterSchema
 */
export type WebflowEventsFilterSchema = {
    /**
     * Keeper Username
     * Filter by Keeper's username
     */
    keeper_username?: string | null;
};

/**
 * WebflowEventSchema
 */
export type WebflowEventSchema = {
    /**
     * Start
     */
    start: string;
    /**
     * Name
     */
    name: string;
    /**
     * Keeper Name
     */
    keeper_name: string;
    /**
     * Keeper Username
     */
    keeper_username: string;
    /**
     * Join Link
     */
    join_link: string;
    /**
     * Image Link
     */
    image_link: string | null;
    /**
     * Keeper Image Link
     */
    keeper_image_link: string | null;
};

/**
 * NextEventSchema
 */
export type NextEventSchema = {
    /**
     * Slug
     */
    slug: string;
    /**
     * Start
     */
    start: string;
    /**
     * Link
     */
    link: string;
    /**
     * Title
     */
    title: string | null;
    /**
     * Seats Left
     */
    seats_left: number;
    /**
     * Duration
     */
    duration: number;
    meeting_provider: MeetingProviderEnum;
    /**
     * Cal Link
     */
    cal_link: string;
    /**
     * Attending
     */
    attending: boolean;
    /**
     * Cancelled
     */
    cancelled: boolean;
    /**
     * Open
     */
    open: boolean;
    /**
     * Joinable
     */
    joinable: boolean;
};

/**
 * SpaceDetailSchema
 */
export type SpaceDetailSchema = {
    /**
     * Slug
     */
    slug: string;
    /**
     * Title
     */
    title: string;
    /**
     * Image Link
     */
    image_link: string | null;
    /**
     * Short Description
     */
    short_description: string;
    /**
     * Content
     */
    content: string;
    author: PublicUserSchema;
    next_event: NextEventSchema | null;
    /**
     * Category
     */
    category: string | null;
    /**
     * Subscribers
     */
    subscribers: number;
    /**
     * Recurring
     */
    recurring: string | null;
    /**
     * Price
     */
    price: number;
};

export type TotemApiApiCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/currentuser';
};

export type TotemApiApiCurrentUserErrors = {
    /**
     * Not Found
     */
    404: Message;
};

export type TotemApiApiCurrentUserError = TotemApiApiCurrentUserErrors[keyof TotemApiApiCurrentUserErrors];

export type TotemApiApiCurrentUserResponses = {
    /**
     * OK
     */
    200: PublicUserSchema;
};

export type TotemApiApiCurrentUserResponse = TotemApiApiCurrentUserResponses[keyof TotemApiApiCurrentUserResponses];

export type TotemApiApiUserAvatarUpdateData = {
    body: AvatarUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/user/avatarupdate';
};

export type TotemApiApiUserAvatarUpdateErrors = {
    /**
     * Not Found
     */
    404: Message;
};

export type TotemApiApiUserAvatarUpdateError = TotemApiApiUserAvatarUpdateErrors[keyof TotemApiApiUserAvatarUpdateErrors];

export type TotemApiApiUserAvatarUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TotemApiApiUserUploadProfileImageData = {
    /**
     * FileParams
     */
    body: {
        /**
         * File
         */
        file: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/avatarimage';
};

export type TotemApiApiUserUploadProfileImageErrors = {
    /**
     * Not Found
     */
    404: Message;
};

export type TotemApiApiUserUploadProfileImageError = TotemApiApiUserUploadProfileImageErrors[keyof TotemApiApiUserUploadProfileImageErrors];

export type TotemApiApiUserUploadProfileImageResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TotemApiApiDevVersionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/dev/version';
};

export type TotemApiApiDevVersionResponses = {
    /**
     * Response
     * OK
     */
    200: string;
};

export type TotemApiApiDevVersionResponse = TotemApiApiDevVersionResponses[keyof TotemApiApiDevVersionResponses];

export type TotemCirclesApiListEventsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Category
         */
        category: string | null;
        /**
         * Author
         */
        author: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/api/v1/spaces/';
};

export type TotemCirclesApiListEventsResponses = {
    /**
     * OK
     */
    200: PagedEventListSchema;
};

export type TotemCirclesApiListEventsResponse = TotemCirclesApiListEventsResponses[keyof TotemCirclesApiListEventsResponses];

export type TotemCirclesApiFilterOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/spaces/filter-options';
};

export type TotemCirclesApiFilterOptionsResponses = {
    /**
     * OK
     */
    200: FilterOptionsSchema;
};

export type TotemCirclesApiFilterOptionsResponse = TotemCirclesApiFilterOptionsResponses[keyof TotemCirclesApiFilterOptionsResponses];

export type TotemCirclesApiEventDetailData = {
    body?: never;
    path: {
        /**
         * Event Slug
         */
        event_slug: string;
    };
    query?: never;
    url: '/api/v1/spaces/event/{event_slug}';
};

export type TotemCirclesApiEventDetailResponses = {
    /**
     * OK
     */
    200: EventDetailSchema;
};

export type TotemCirclesApiEventDetailResponse = TotemCirclesApiEventDetailResponses[keyof TotemCirclesApiEventDetailResponses];

export type TotemCirclesApiUpcomingEventsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Space Slug
         * Space slug
         */
        space_slug?: string;
        /**
         * Month
         * Month of the year, 1-12
         */
        month?: number;
        /**
         * Year
         * Year of the month, e.g. 2024
         */
        year?: number;
    };
    url: '/api/v1/spaces/calendar';
};

export type TotemCirclesApiUpcomingEventsResponses = {
    /**
     * Response
     * OK
     */
    200: Array<EventCalendarSchema>;
};

export type TotemCirclesApiUpcomingEventsResponse = TotemCirclesApiUpcomingEventsResponses[keyof TotemCirclesApiUpcomingEventsResponses];

export type TotemCirclesApiWebflowEventsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Keeper Username
         * Filter by Keeper's username
         */
        keeper_username?: string | null;
    };
    url: '/api/v1/spaces/webflow/list_events';
};

export type TotemCirclesApiWebflowEventsListResponses = {
    /**
     * Response
     * OK
     */
    200: Array<WebflowEventSchema>;
};

export type TotemCirclesApiWebflowEventsListResponse = TotemCirclesApiWebflowEventsListResponses[keyof TotemCirclesApiWebflowEventsListResponses];

export type TotemCirclesApiListSpacesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/spaces/list';
};

export type TotemCirclesApiListSpacesResponses = {
    /**
     * Response
     * OK
     */
    200: Array<SpaceDetailSchema>;
};

export type TotemCirclesApiListSpacesResponse = TotemCirclesApiListSpacesResponses[keyof TotemCirclesApiListSpacesResponses];

export type ClientOptions = {
    baseUrl: string;
};